{"version":3,"sources":["helpers/splitData.js","helpers/sortColumn.js","components/TableRows/TableRow/TableRow.js","components/TableRows/TableRows.js","components/Table/Table.js","components/DataLoader/DataLoader.js","components/InfoBlock/InfoBlock.js","components/AddRow/AddRow.js","components/Filter/Filter.js","components/UI/Pagination/Pagination.js","components/UI/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["splitData","array","chunk","splittedArray","i","j","length","push","slice","sortColumn","columnToSort","dataType","order","sortingFunction","a","b","localeCompare","sort","tableRow","props","react_default","createElement","onClick","showInfoHandler","id","firstName","lastName","email","phone","tableRows","tableRowsArray","tableData","map","index","TableRow","key","bind","table","classes","sortingOrder","className","onMouseDown","event","preventDefault","sortColumnHandler","TableRows","data","dataLoader","onChange","selectDataSizeHandler","name","value","getDataHandler","infoBlock","infoToDisplay","address","description","readOnly","streetAddress","city","state","zip","addRow","addRowForm","showAddRowButton","newRowData","showAddRowForm","type","placeholder","inputChangeHandler","addRowHandler","showFormHandler","filter","dataToSearchHandler","columnToSearchHandler","findDataHandler","pagination","toPreviousPageHandler","currentPage","numberOfPages","toNextPageHandler","spinner","App","receivedData","splittedData","dataToSort","pageToRender","dataSize","dataToSearch","columnToSearch","loading","hasError","_this","setState","target","dataLink","axios","get","then","response","catch","error","console","log","finally","newPage","tableRowIndex","tableRowClicked","prevState","inputToChange","unpdatedRowData","Object","objectSpread","updatedData","toConsumableArray","unshift","updatedSplittedData","dataToFilter","filteredData","dataItem","toString","indexOf","columnType","this","Table_Table","Pagination_Pagination","AddRow_AddRow","Filter_Filter","InfoBlock_InfoBlock","DataLoader_DataLoader","Spinner_Spinner","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff63d3a3.chunk.js","sourcesContent":["const splitData = (array, chunk) => {\r\n    const splittedArray = [];\r\n\r\n    for (let i = 0, j = array.length; i < j; i+=chunk) {\r\n        splittedArray.push(array.slice(i, i + chunk));\r\n    }\r\n\r\n    return splittedArray;\r\n}\r\n\r\nexport default splitData;","const sortColumn = (array, columnToSort, dataType, order) => {\r\n    const sortedArray = array;\r\n\r\n    let sortingFunction = null;\r\n\r\n    if (dataType === 'number' && order === 'asc') {\r\n        sortingFunction = (a, b) => a[columnToSort] - b[columnToSort];\r\n    }\r\n\r\n    if (dataType === 'number' && order === 'desc') {\r\n        sortingFunction = (a, b) => b[columnToSort] - a[columnToSort];\r\n    }\r\n\r\n    if (dataType === 'string' && order === 'asc') {\r\n        sortingFunction = (a, b) => a[columnToSort].localeCompare(b[columnToSort]);\r\n    }\r\n\r\n    if (dataType === 'string' && order === 'desc') {\r\n        sortingFunction = (a, b) => b[columnToSort].localeCompare(a[columnToSort]);\r\n    }\r\n\r\n    return sortedArray.sort(sortingFunction);\r\n}\r\n\r\nexport default sortColumn;","import React from 'react';\r\n\r\nconst tableRow = props => (\r\n        <tr onClick={props.showInfoHandler}>\r\n            <td>{props.id}</td>\r\n            <td>{props.firstName}</td>\r\n            <td>{props.lastName}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.phone}</td>\r\n        </tr>\r\n);\r\n\r\nexport default tableRow;","import React from 'react';\r\n\r\nimport TableRow from './TableRow/TableRow';\r\n\r\nconst tableRows = props => {\r\n    const tableRowsArray = props.tableData.map((tableRow, index) => {\r\n        return <TableRow\r\n            key={tableRow.email}\r\n            id={tableRow.id}\r\n            firstName={tableRow.firstName}\r\n            lastName={tableRow.lastName}\r\n            email={tableRow.email} \r\n            phone={tableRow.phone}\r\n            showInfoHandler={props.showInfoHandler.bind(this, index)} />;\r\n    });\r\n\r\n    return (\r\n        <tbody>\r\n            {tableRowsArray}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default tableRows;","import React from 'react';\r\n\r\nimport TableRows from '../TableRows/TableRows';\r\nimport './Table.css';\r\n\r\nconst table = props => {\r\n    let classes = 'Ascending';\r\n\r\n    if (props.sortingOrder === 'desc') {\r\n        classes = 'Descending';\r\n    }\r\n\r\n    const onMouseDown = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <table className=\"Table\">\r\n            <thead onMouseDown={onMouseDown}>\r\n                <tr>\r\n                    <th\r\n                        onClick={props.sortColumnHandler.bind(this, 'id')}\r\n                        className={classes}\r\n                    >Id</th>\r\n                    <th\r\n                        onClick={props.sortColumnHandler.bind(this, 'firstName')}\r\n                        className={classes}\r\n                    >First Name</th>\r\n                    <th\r\n                        onClick={props.sortColumnHandler.bind(this, 'lastName')}\r\n                        className={classes}\r\n                    >Last Name</th>\r\n                    <th\r\n                        onClick={props.sortColumnHandler.bind(this, 'email')}\r\n                        className={classes}\r\n                    >Email</th>\r\n                    <th\r\n                        onClick={props.sortColumnHandler.bind(this, 'phone')}\r\n                        className={classes}\r\n                    >Phone</th>\r\n                </tr>\r\n            </thead>\r\n            <TableRows\r\n                tableData={props.data}\r\n                showInfoHandler={props.showInfoHandler}\r\n            />\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default table;","import React from 'react';\r\n\r\nimport './DataLoader.css';\r\n\r\nconst dataLoader = props => (\r\n    <div className=\"DataLoader\">\r\n        Выберете набор данных:\r\n        <select onChange={props.selectDataSizeHandler} name=\"options\">\r\n            <option value=\"small\">Маленький</option>\r\n            <option value=\"large\">Большой</option>\r\n        </select>\r\n        <button onClick={props.getDataHandler}>Загрузить данные</button>\r\n    </div>\r\n);\r\n\r\nexport default dataLoader;","import React from 'react';\r\n\r\nimport './InfoBlock.css';\r\n\r\nconst infoBlock = props => {\r\n    if (!props.infoToDisplay.address || !props.infoToDisplay.description) {\r\n        return (\r\n            <div className=\"InfoBlock\">\r\n                Выбран пользователь: <b>{props.infoToDisplay.firstName + ' '\r\n                + props.infoToDisplay.lastName}</b>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"InfoBlock\">\r\n            <div>\r\n                Выбран пользователь: <b>{props.infoToDisplay.firstName + ' '\r\n                + props.infoToDisplay.lastName}</b>\r\n            </div>\r\n            <div>\r\n                Описание:\r\n                <br /><textarea\r\n                    value={props.infoToDisplay.description}\r\n                    readOnly\r\n                ></textarea>\r\n            </div>\r\n            <div>\r\n                Адрес проживания: <b>{props.infoToDisplay.address.streetAddress}</b>\r\n            </div>\r\n            <div>\r\n                Город: <b>{props.infoToDisplay.address.city}</b>\r\n            </div>\r\n            <div>\r\n                Провинция/Штат: <b>{props.infoToDisplay.address.state}</b>\r\n            </div>\r\n            <div>\r\n                Индекс: <b>{props.infoToDisplay.address.zip}</b>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default infoBlock;","import React from 'react';\r\n\r\nimport './AddRow.css';\r\n\r\nconst addRow = props => {\r\n    let addRowForm = null;\r\n\r\n    const showAddRowButton = props.newRowData.id && props.newRowData.firstName &&\r\n        props.newRowData.lastName && props.newRowData.email && props.newRowData.phone\r\n\r\n    if (props.showAddRowForm) {\r\n        addRowForm = (\r\n            <form>\r\n                <input \r\n                    type='number' \r\n                    name=\"id\"\r\n                    placeholder=\"Id\" \r\n                    value={props.newRowData.id}\r\n                    onChange={props.inputChangeHandler} \r\n                />\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"firstName\" \r\n                    placeholder=\"First Name\"\r\n                    value={props.newRowData.firstName}\r\n                    onChange={props.inputChangeHandler}\r\n                />\r\n                <input\r\n                    type=\"text\" \r\n                    name=\"lastName\" \r\n                    placeholder=\"Last Name\"\r\n                    value={props.newRowData.lastName}\r\n                    onChange={props.inputChangeHandler}\r\n                />\r\n                <input \r\n                    type=\"email\" \r\n                    name=\"email\" \r\n                    placeholder=\"Email\"\r\n                    value={props.newRowData.email}\r\n                    onChange={props.inputChangeHandler}\r\n                />\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"phone\" \r\n                    placeholder=\"Phone Number\"\r\n                    value={props.newRowData.phone}\r\n                    onChange={props.inputChangeHandler}\r\n                />\r\n                {\r\n                    showAddRowButton ? \r\n                    <button onClick={props.addRowHandler}>Добавить в таблицу</button>\r\n                    : null\r\n                }\r\n                \r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"AddRow\">\r\n            <button onClick={props.showFormHandler}>Добавить</button>\r\n            {addRowForm}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default addRow;","import React from 'react';\r\n\r\nimport './Filter.css';\r\n\r\nconst filter = props => (\r\n    <div className=\"Filter\">\r\n        <label>\r\n            Поиск: <input type=\"text\" onChange={props.dataToSearchHandler} />\r\n        </label>\r\n        <label>\r\n            в столбце:\r\n            <select onChange={props.columnToSearchHandler} name=\"searchColumn\">\r\n                <option value=\"id\">Id</option>\r\n                <option value=\"firstName\">First Name</option>\r\n                <option value=\"lastName\">Last Name</option>\r\n                <option value=\"email\">Email</option>\r\n                <option value=\"phone\">Phone</option>\r\n            </select>\r\n        </label>\r\n        <button onClick={props.findDataHandler}>Найти</button>\r\n    </div>\r\n);\r\n\r\nexport default filter;","import React from 'react';\r\n\r\nimport './Pagination.css';\r\n\r\nconst pagination = props => {\r\n    return (\r\n        <div className=\"Pagination\">\r\n            <button\r\n                onClick={props.toPreviousPageHandler}\r\n            >Previous</button>\r\n            <span>{props.currentPage} from {props.numberOfPages}</span>\r\n            <button\r\n                onClick={props.toNextPageHandler}\r\n            >Next</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default pagination;","import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nconst spinner = () => (\r\n    <div className=\"Loader\">Loading...</div>\r\n);\r\n\r\nexport default spinner;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport splitData from './helpers/splitData';\nimport sortColumn from './helpers/sortColumn';\nimport './App.css';\n\nimport Table from './components/Table/Table';\nimport DataLoader from './components/DataLoader/DataLoader';\nimport InfoBlock from './components/InfoBlock/InfoBlock';\nimport AddRow from './components/AddRow/AddRow';\nimport Filter from './components/Filter/Filter';\nimport Pagination from './components/UI/Pagination/Pagination';\nimport Spinner from './components/UI/Spinner/Spinner';\n\nclass App extends Component {\n  state = {\n    receivedData: null,\n    splittedData: null,\n    infoToDisplay: null,\n    dataToSort: null,\n    pageToRender: 0,\n    dataSize: 'small',\n    dataToSearch: '',\n    columnToSearch: 'id',\n    loading: false,\n    hasError: false,\n    showAddRowForm: false,\n    newRowData: {\n      id: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    },\n    sortingOrder: 'asc'\n  }\n\n  selectDataSizeHandler = (event) => {\n    this.setState({\n      dataSize: event.target.value\n    });\n  }\n\n  getDataHandler = () => {\n    let dataLink = null;\n\n    if (this.state.dataSize === 'small') {\n      dataLink = 'http://www.filltext.com/' + \n        '?rows=32&id={number|1000}&firstName={firstName}' +\n        '&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}' + \n        '&address={addressObject}&description={lorem|32}';\n    }\n\n    if (this.state.dataSize === 'large') {\n      dataLink = 'http://www.filltext.com/' + \n        '?rows=1000&id={number|1000}&firstName={firstName}' + \n        '&delay=3&lastName={lastName}&email={email}' + \n        '&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}' + \n        '&description={lorem|32}';\n    }\n\n    this.setState({\n      loading: true,\n      pageToRender: 0\n    });\n\n    axios.get(dataLink)\n      .then(response => {\n        const receivedData = response.data;\n        const splittedData = splitData(receivedData, 20);\n\n        this.setState({\n          receivedData: receivedData,\n          splittedData: splittedData,\n          infoToDisplay: null\n        });\n      })\n      .catch(error => {\n        this.setState({\n          hasError: true\n        });\n        console.log(error);\n      })\n      .finally(() => {\n        this.setState({ loading: false });\n      });\n  }\n\n  toNextPageHandler = () => {\n    let newPage = this.state.pageToRender + 1;\n\n    if (newPage >= this.state.splittedData.length) {\n      newPage = 0;\n    }\n\n    this.setState({\n      pageToRender: newPage\n    });\n  }\n\n  toPreviousPageHandler = () => {\n    let newPage = this.state.pageToRender - 1;\n\n    if (newPage < 0) {\n      newPage = this.state.splittedData.length - 1;\n    }\n\n    this.setState({\n      pageToRender: newPage\n    });\n  }\n\n  showInfoHandler = (tableRowIndex) => {\n    const pageWithData = this.state.splittedData[this.state.pageToRender];\n    const tableRowClicked = pageWithData[tableRowIndex];\n\n    this.setState({\n      infoToDisplay: tableRowClicked\n    });\n  }\n\n  showFormHandler = () => {\n    this.setState(prevState => ({\n      showAddRowForm: !prevState.showAddRowForm\n    }));\n  }\n\n  inputChangeHandler = (event) => {\n    const inputToChange = event.target.name;\n\n    const unpdatedRowData = {\n      ...this.state.newRowData\n    }\n\n    unpdatedRowData[inputToChange] = event.target.value;\n\n    this.setState({\n      newRowData: unpdatedRowData\n    });\n  }\n\n  addRowHandler = (event) => {\n    event.preventDefault();\n\n    const updatedData = [\n      ...this.state.receivedData\n    ];\n\n    updatedData.unshift(this.state.newRowData);\n\n    const updatedSplittedData = splitData(updatedData, 20);\n\n    const resetRowData = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    }\n\n    this.setState({\n      receivedData: updatedData,\n      splittedData: updatedSplittedData,\n      newRowData: resetRowData,\n      dataToSort: updatedData\n    });\n  }\n\n  dataToSearchHandler = (event) => {\n    this.setState({\n      dataToSearch: event.target.value\n    });\n  }\n\n  columnToSearchHandler = (event) => {\n    this.setState({\n      columnToSearch: event.target.value\n    });\n  }\n\n  findDataHandler = () => {\n    const dataToFilter = [\n      ...this.state.receivedData\n    ];\n    const columnToSearch = this.state.columnToSearch;\n    const dataToSearch = this.state.dataToSearch;\n    let filteredData = null;\n\n    if (!dataToSearch) {\n      filteredData = dataToFilter;\n    } else {\n      filteredData = dataToFilter.filter(dataItem => {\n          return !!~dataItem[columnToSearch].toString().indexOf(dataToSearch);\n      });\n    }\n\n    if (!filteredData.length) return;\n\n    const updatedSplittedData = splitData(filteredData, 20);\n\n    this.setState({\n      splittedData: updatedSplittedData,\n      pageToRender: 0,\n      dataToSort: filteredData\n    });\n  }\n\n  sortColumnHandler = (columnType) => {\n    let dataToSort = this.state.receivedData;\n    let sortingOrder = this.state.sortingOrder;\n\n    if (this.state.dataToSort) {\n      dataToSort = this.state.dataToSort;\n    }\n\n    if (columnType === 'id') {\n      dataToSort = sortColumn(dataToSort, 'id', 'number', sortingOrder);\n    } else {\n      dataToSort = sortColumn(dataToSort, columnType, 'string', sortingOrder);\n    }\n\n    if (sortingOrder === 'asc') {\n      sortingOrder = 'desc';\n    } else {\n      sortingOrder = 'asc';\n    }\n\n    const updatedSplittedData = splitData(dataToSort, 20);\n\n    this.setState({\n      splittedData: updatedSplittedData,\n      sortingOrder: sortingOrder\n    });\n  }\n\n  render() {\n    let table = null;\n    let pagination = null;\n    let infoBlock = null;\n    let addRow = null;\n    let filter = null;\n    let error = null;\n\n    if (this.state.hasError) {\n      error = <p>Что-то пошло не так...</p>;\n    }\n\n    if (this.state.splittedData && !this.state.loading) {\n      table = <Table \n        data={this.state.splittedData[this.state.pageToRender]}\n        sortingOrder={this.state.sortingOrder}\n        showInfoHandler={this.showInfoHandler}\n        sortColumnHandler={this.sortColumnHandler} />;\n\n      pagination = <Pagination\n        currentPage={this.state.pageToRender + 1}\n        numberOfPages={this.state.splittedData.length}\n        toNextPageHandler={this.toNextPageHandler}\n        toPreviousPageHandler={this.toPreviousPageHandler} />;\n      \n      addRow = <AddRow\n        showFormHandler={this.showFormHandler}\n        inputChangeHandler={this.inputChangeHandler}\n        addRowHandler={this.addRowHandler}\n        showAddRowForm={this.state.showAddRowForm}\n        newRowData={this.state.newRowData} />;\n\n      filter = <Filter\n        dataToSearchHandler={this.dataToSearchHandler}\n        columnToSearchHandler={this.columnToSearchHandler}\n        findDataHandler={this.findDataHandler} />\n    }\n\n    if (this.state.infoToDisplay && !this.state.loading) {\n      infoBlock = <InfoBlock\n        infoToDisplay={this.state.infoToDisplay} />\n    }\n\n    return (\n      <div className=\"App\">\n        <DataLoader\n          selectDataSizeHandler={this.selectDataSizeHandler}\n          getDataHandler={this.getDataHandler} />\n        {error}\n        {filter}\n        {addRow}\n        {pagination}\n        {table}\n        {infoBlock}\n        {this.state.loading ? <Spinner /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}